{"version":3,"sources":["RPSfunctions.js","serviceWorker.js","index.js","App.js"],"names":["RPSCapsule","clearUScore","document","getElementById","clearBScore","innerHTML","maxScore","RPS","e","terminator","userChoice","choices","randomN","Math","random","floor","target","result","win","lose","i","Number","Boolean","window","location","hostname","match","ReactDOM","render","react_default","a","createElement","className","type","id","onLoad","onClick","href","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.abeff98e.chunk.js","sourcesContent":["//reset scrores\r\nexport function RPSCapsule(){\r\n    let clearUScore = document.getElementById('yourScore')\r\n    let clearBScore = document.getElementById('botScore')\r\n\r\n    // let botScore = document.getElementById('botScore');\r\n    clearUScore.innerHTML = 0;\r\n    clearBScore.innerHTML = 0;\r\n    } \r\n\r\n    function maxScore() {\r\n    let clearUScore = document.getElementById('yourScore')\r\n    let clearBScore = document.getElementById('botScore')\r\n        if (clearUScore.innerHTML >= 5 || \r\n            clearBScore.innerHTML >= 5) {\r\n                RPSCapsule();\r\n    }\r\n    \r\n}\r\n//game\r\nexport function RPS(e) {\r\n    let userChoice = '';\r\n    let terminator = '';\r\n    let choices = ['rock', 'paper', 'scissors'];\r\n \r\n    //bot functions\r\n    //random number generator for the bot\r\n    let randomN = Math.random();\r\n    let range = Math.floor(randomN * 3);\r\n    \r\n    //allocating the index number to the array\r\n    terminator = choices[range];\r\n    \r\n    //printing the option of the bot to the screen\r\n    document.getElementById('machine').innerHTML = terminator;\r\n    \r\n    //User Related functions\r\n    //allocating the index number to the array\r\n    if (e.target === document.getElementById('rock')) {\r\n        userChoice = choices[0];\r\n    } else if (e.target === document.getElementById('paper')) {\r\n        userChoice = choices[1];\r\n    } else if(e.target === document.getElementById('scissors')) {\r\n        userChoice = choices[2];\r\n    };\r\n    //printing the choice of the bot\r\n    document.getElementById('yourChoice').innerHTML = userChoice;\r\n\r\n\r\n    //outcomes of the choice combinations\r\n    let result = document.getElementById('result');\r\n    if (userChoice === 'rock' && terminator === 'rock') {\r\n        result.innerHTML= 'Draw';\r\n    } else if (userChoice === 'rock' && terminator === 'scissors') {\r\n        result.innerHTML= 'rock beats scissors';\r\n        win();\r\n    } else if (userChoice === 'rock' && terminator === 'paper') {\r\n        result.innerHTML= 'rock loses to paper';\r\n        lose();\r\n    } else if (userChoice === 'paper' && terminator === 'rock') {\r\n        result.innerHTML='paper beats rock';\r\n        win();\r\n    } else if (userChoice === 'paper' && terminator === 'paper') {\r\n        result.innerHTML='Draw';\r\n    } else if (userChoice === 'paper' && terminator === 'scissors') {\r\n        result.innerHTML='Paper loses to scissors';\r\n        lose();\r\n    } else if (userChoice === 'scissors' && terminator === 'rock') {\r\n        result.innerHTML='scissors loses to rock';\r\n        lose();\r\n    } else if (userChoice === 'scissors' && terminator === 'paper') {\r\n        result.innerHTML='scissors beats paper';\r\n        win();\r\n    } else if (userChoice === 'scissors' && terminator === 'scissors') {\r\n        result.innerHTML='Draw';\r\n\r\n   \r\n    }\r\n}\r\n\r\n//additional functions\r\nfunction win() {\r\n    let i= Number(document.getElementById('yourScore').innerHTML);\r\n    i++;\r\n    document.getElementById('yourScore').innerHTML = i;\r\n    maxScore();\r\n    \r\n    }\r\nfunction lose(){\r\n    let i= Number(document.getElementById('botScore').innerHTML);\r\n    i++;\r\n    document.getElementById('botScore').innerHTML = i;\r\n    maxScore();\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react'; \nimport {RPS, RPSCapsule} from './RPSfunctions.js'\nimport './App.css';\n\n\nexport default function App() {\n  return (\n    <div className=\"content\">\n      <button type='button' id=\"startReset\" onLoad={RPSCapsule} onClick={RPSCapsule}>Start/Reset</button>\n      <button type='button' id=\"rock\" className=\"selection\" onClick={RPS} >Rock </button>\n      <button type='button' id=\"paper\" className=\"selection\" onClick={RPS}>Paper </button>\n      <button type='button' id=\"scissors\" className=\"selection\" onClick={RPS}>Scissors </button>\n      <div className=\"scoreBoard\">\n        <p id=\"yourScore\">0</p>\n        <p>:</p>\n        <p id=\"botScore\">0</p>\n      </div>\n      <p>You chose: <span id='yourChoice'></span></p><br />\n      <p>Machine chose: <span id='machine'></span> </p><br />\n      <br />\n      <p id=\"result\">Result: </p>\n\n      <p>The code behind the game is <a href=\"https://github.com/PCloherty/Portfolio/blob/master/src/content/Projects/IndividualProjects/RPSProject.js\">available here</a>.</p>\n\n    </div>\n\n\n  )\n}\n"],"sourceRoot":""}